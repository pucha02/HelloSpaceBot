import base64
import json
import hashlib
import subprocess
import requests
import telebot
import time
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import threading
from pymongo import MongoClient
import schedule
from datetime import datetime, timedelta
import pytz
from apscheduler.schedulers.background import BackgroundScheduler

from test_level import start_quiz, send_question, calculate_result
from send_news import enter_news, send_news_to_user, send_news_to_all
from main_menu import send_main_menu
from about_school_menu import about_school_menu, why_we, popular_question
from learn_menu import learn_menu, course_structure, format_learn, course_deteil, show_price, show_about_course
from contacts import contacts
from Test_On_Level_English import send_next_question, calculate_level, send_welcome
from teachers_menu import teachers_menu, handle_teacher_choice

admins = [7293016451]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
CONTACT_RECEIVER_CHAT_ID = 635258639

#7136284096:AAGjmsq4z_iPg9oWnEg4aqv3sv5qsAB_m0U - TEST API
#7486039291:AAHUoKYAHnBLQ49uVAAyQFNQTlbmKWNnHW4 - MAIN API

API_TOKEN = '7486039291:AAHUoKYAHnBLQ49uVAAyQFNQTlbmKWNnHW4'
client = MongoClient('mongodb+srv://hellospace2024:DFavIxnWstkWjkDS@cluster0.fnq8d.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0', 
                     tls=True, tlsAllowInvalidCertificates=True)

db = client['bot']
users_collection = db['users']

bot = telebot.TeleBot(API_TOKEN)
local_timezone = pytz.timezone('Europe/Kiev')

user_data = {}
user_answers = {}
user_scores = {}
last_interaction_times = {}
user_states = {}
user_contacts = {}
admin_news = {}
selected_users = {}

class States:
    WELCOME = "WELCOME"
    CHOOSING_OPTION = "CHOOSING_OPTION"
    CHOOSING_DIRECTION = "CHOOSING_DIRECTION"
    CHOOSING_MEMBERS = "CHOOSING_MEMBERS"
    CHOOSING_FORMAT = "CHOOSING_FORMAT"
    LEAVE_CONTACT = "LEAVE_CONTACT"
    PAYMENT = "PAYMENT"
    ENTERING_NEWS = "ENTERING_NEWS"
    CHOOSING_USER = "CHOOSING_USER"
    CONFIRM_SENDING_TO_USER = "CONFIRM_SENDING_TO_USER"
    CONFIRM_SENDING_TO_ALL = "CONFIRM_SENDING_TO_ALL"

# questions = [
#     {
#         'question': 'What is the past form of the verb "go"?',
#         'correct': 'went'
#     },
#     {
#         'question': 'Which one is a synonym for "happy"?',
#         'correct': 'joyful'
#     },
#     {
#         'question': 'Write the correct sentence: "I ___ a dog." (have/has)',
#         'correct': 'have'
#     },
# ]


grammar_questions = [
    {"level": "A1", "question": "1Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nShe ___ a student.", "options": ["is", "are", "am", "be"], "answer": "is"},
    {"level": "A1", "question": "2Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nI ___ coffee every morning.", "options": ["drink", "drinks", "drinking", "drank"], "answer": "drink"},
    # –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ 8 –ø–∏—Ç–∞–Ω—å –¥–ª—è A1
    {"level": "A2", "question": "3Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nWhere ___ you go yesterday?", "options": ["did", "does", "do", "are"], "answer": "did"},
    {"level": "A2", "question": "4Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nI haven‚Äôt seen him ___ a long time.", "options": ["since", "for", "by", "at"], "answer": "for"},
    # –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ 8 –ø–∏—Ç–∞–Ω—å –¥–ª—è A2
    {"level": "B1", "question": "5Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nIf I ___ more time, I would help you.", "options": ["have", "had", "would have", "will have"], "answer": "had"},
    {"level": "B1", "question": "6Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nThe film was ___ interesting than I expected.", "options": ["much", "more", "very", "many"], "answer": "more"},
    # –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ 8 –ø–∏—Ç–∞–Ω—å –¥–ª—è B1
    {"level": "B2", "question": "7Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nBy the time we arrived, they ___ dinner.", "options": ["had finished", "finished", "have finished", "are finishing"], "answer": "had finished"},
    {"level": "B2", "question": "8Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nShe told me that she ___ the book already.", "options": ["reads", "was reading", "had read", "is reading"], "answer": "had read"},
    # –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ 8 –ø–∏—Ç–∞–Ω—å –¥–ª—è B2
    {"level": "C1", "question": "9Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nI wish I ___ the truth earlier.", "options": ["know", "had known", "have known", "would know"], "answer": "had known"},
    {"level": "C1", "question": "üîü –∑ 1Ô∏è‚É£2Ô∏è‚É£\nThe project was delayed ___ a lack of funding.", "options": ["because", "due to", "despite", "since"], "answer": "due to"},
    # –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ 8 –ø–∏—Ç–∞–Ω—å –¥–ª—è C1
    {"level": "C2", "question": "1Ô∏è‚É£1Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nThe politician‚Äôs speech was filled with ___ rhetoric.", "options": ["persuasive", "incoherent", "verbose", "laconic"], "answer": "verbose"},
    {"level": "C2", "question": "1Ô∏è‚É£2Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nHis argument was both ___ and incisive.", "options": ["flawed", "compelling", "dull", "redundant"], "answer": "compelling"},
    # –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ 8 –ø–∏—Ç–∞–Ω—å –¥–ª—è C2
]

# –í–æ–ø—Ä–æ—Å—ã –Ω–∞ –ª–µ–∫—Å–∏–∫—É –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π
vocabulary_questions = [
    {"level": "A1", "question": "1Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nWhat is the opposite of 'cold'?", "options": ["hot", "cool", "warm", "chilly"], "answer": "hot"},
    {"level": "A1", "question": "2Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nWhich word means the same as 'start'?", "options": ["begin", "finish", "stop", "continue"], "answer": "begin"},
    # –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ 8 –ø–∏—Ç–∞–Ω—å –¥–ª—è A1
    {"level": "A2", "question": "3Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nWhat is a synonym for 'job'?", "options": ["career", "salary", "profession", "task"], "answer": "career"},
    {"level": "A2", "question": "4Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nFill in the blank: He ___ his friends for a big party last weekend.", "options": ["invited", "brought", "met", "called"], "answer": "invited"},
    # –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ 8 –ø–∏—Ç–∞–Ω—å –¥–ª—è A2
    {"level": "B1", "question": "5Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nChoose the word that best fits the sentence: She is very ___ and always tells the truth.", "options": ["honest", "clever", "brave", "funny"], "answer": "honest"},
    {"level": "B1", "question": "6Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nHe refused to ___ the invitation.", "options": ["accept", "receive", "get", "take"], "answer": "accept"},
    # –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ 8 –ø–∏—Ç–∞–Ω—å –¥–ª—è B1
    {"level": "B2", "question": "7Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nWhat is the meaning of the idiom 'to beat around the bush'?", "options": ["to avoid talking about the main issue", "to go directly to the point", "to be aggressive", "to beat someone"], "answer": "to avoid talking about the main issue"},
    {"level": "B2", "question": "8Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nChoose the word closest in meaning to 'exhausted'.", "options": ["tired", "energetic", "bored", "relaxed"], "answer": "tired"},
    # –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ 8 –ø–∏—Ç–∞–Ω—å –¥–ª—è B2
    {"level": "C1", "question": "9Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nThe word 'ambivalent' means:", "options": ["having mixed feelings", "uncertain", "hostile", "friendly"], "answer": "having mixed feelings"},
    {"level": "C1", "question": "üîü –∑ 1Ô∏è‚É£2Ô∏è‚É£\nWhat is a synonym for 'ubiquitous'?", "options": ["omnipresent", "scarce", "unique", "rare"], "answer": "omnipresent"},
    # –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ 8 –ø–∏—Ç–∞–Ω—å –¥–ª—è C1
    {"level": "C2", "question": "1Ô∏è‚É£1Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nWhat is the meaning of 'laconic'?", "options": ["brief and to the point", "wordy", "verbose", "elaborate"], "answer": "brief and to the point"},
    {"level": "C2", "question": "1Ô∏è‚É£2Ô∏è‚É£ –∑ 1Ô∏è‚É£2Ô∏è‚É£\nWhich word means 'clear and logical thinking'?", "options": ["lucid", "incoherent", "confused", "vague"], "answer": "lucid"},
    # –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ 8 –ø–∏—Ç–∞–Ω—å –¥–ª—è C2
]

teachers_data = {
    "–û–ª–µ–Ω–∞": {
        "text": "üë©‚Äçüè´ *–í–∏–∫–ª–∞–¥–∞—á –û–ª–µ–Ω–∞*\n\n"
                "–ú–∞—é 4 —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É –≤–∏–∫–ª–∞–¥–∞–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏. –ü—Ä–∞—Ü—é—é –∑ —à–∫–æ–ª—è—Ä–∞–º–∏ —Ç–∞ –¥—ñ—Ç—å–º–∏ –¥–æ—à–∫—ñ–ª—å–Ω–æ–≥–æ –≤—ñ–∫—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.\n\n"
                "üí¨ –ü—Ä–∞—Ü—é—é –∑ —é–Ω–∏–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏, —è–∫—ñ —Ö–æ—á—É—Ç—å –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Ä–æ–∑–º–æ–≤–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ —Ç–∞ –ø–æ—á—É–≤–∞—Ç–∏—Å—å –≤–ø–µ–≤–Ω–µ–Ω—ñ—à–∏–º–∏.\n\n"
                "üé• –ë—É–¥–µ–º–æ –≤—á–∏—Ç–∏ –∂–∏–≤—É –º–æ–≤—É, –¥–∏–≤–∏—Ç–∏—Å—è TikTok/YouTube, —Ä–æ–∑–±–∏—Ä–∞—Ç–∏ —É–ª—é–±–ª–µ–Ω—ñ —Å–µ—Ä—ñ–∞–ª–∏ —Ç–∞ —Ç—Ä–µ–∫–∏.",
        "photo": "https://i.postimg.cc/JzsR8XP0/IMG-3209.jpg"
    },
    "–†–æ–¥–∞": {
        "text": "üë©‚Äçüè´ *–ù–æ—Å—ñ–π–∫–∞ –†–æ–¥–∞*\n\n"
                "I have over 1 year of experience teaching English as a second language, focusing on proficiency, basic language usage, and business communication.\n\n"
                "üí¨ I assist students aiming to improve their language proficiency, writing, and presentation skills, especially those preparing for IELTS and TOEFL.\n\n"
                "üéì My lessons are dynamic, with real-life case studies and interactive methods to engage learners.",
        "photo": "https://i.postimg.cc/NFjW4hnF/image.jpg"
    },
    "–û–ª—è": {
        "text": "üë©‚Äçüè´ *–í–∏–∫–ª–∞–¥–∞—á –û–ª—è*\n\n"
                "–ú–∞—é 7 —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É –≤–∏–∫–ª–∞–¥–∞–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏. –°–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—é—Å—å –Ω–∞ —Ä–æ–∑–º–æ–≤–Ω—ñ–π –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ–π —Ç–∞ –ø—Ä–∞—Ü—é—é —è–∫ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ, —Ç–∞–∫ —ñ –≤ –≥—Ä—É–ø–∞—Ö.\n\n"
                "üí¨ –ó—ñ –º–Ω–æ—é –≤–µ—Å–µ–ª–æ —Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ, –∑–∞–≤–∂–¥–∏ –∑–Ω–∞—Ö–æ–¥–∂—É –ø—ñ–¥—Ö—ñ–¥ –¥–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —ñ –º–æ—Ç–∏–≤—É—é —ó—Ö –¥–æ –≤–∏–≤—á–µ–Ω–Ω—è –º–æ–≤–∏.\n\n"
                "üìö –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∫–æ–º—É–Ω—ñ–∫–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ —Ç–∞ –¥–æ–ø–æ–º–∞–≥–∞—é –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –¥–ª—è —Ä–æ–±–æ—Ç–∏.",
        "photo": "https://i.postimg.cc/j5s9x0tc/image.jpg"
    },
   "–Ø—Ä–æ—Å–ª–∞–≤": {
    "text": "üë®‚Äçüè´ *–í–∏–∫–ª–∞–¥–∞—á –Ø—Ä–æ—Å–ª–∞–≤*\n\n"
            "–ú–∞—é 2 —Ä–æ–∫–∏ –¥–æ—Å–≤—ñ–¥—É –≤–∏–∫–ª–∞–¥–∞–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏ üá¨üáß –¥–ª—è –¥–æ—Ä–æ—Å–ª–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ A1-B1. –ú—ñ–π –ø—ñ–¥—Ö—ñ–¥ ‚Äî —Ü–µ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —á–µ—Ä–µ–∑ —Ñ—ñ–ª—å–º–∏ —Ç–∞ —Å–µ—Ä—ñ–∞–ª–∏ üé¨, —â–æ —Ä–æ–±–∏—Ç—å —É—Ä–æ–∫–∏ —Ü—ñ–∫–∞–≤–∏–º–∏!\n\n"
            "–Ø –≤–º—ñ—é –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Å–ø—ñ–ª—å–Ω—É –º–æ–≤—É –∑ —É—Å—ñ–º–∞, –æ—Å–æ–±–ª–∏–≤–æ –∑ —Ö–ª–æ–ø—Ü—è–º–∏ —Ç–∞ —á–æ–ª–æ–≤—ñ–∫–∞–º–∏, —è–∫—â–æ –π–¥–µ—Ç—å—Å—è –ø—Ä–æ —Ñ—É—Ç–±–æ–ª –∞–±–æ —ñ–Ω—à—ñ '—á–æ–ª–æ–≤—ñ—á—ñ' —Ç–µ–º–∏. –ó–∞–≤–∂–¥–∏ –Ω–∞–º–∞–≥–∞—é—Å—å –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–º —ñ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∏–º!",
    "photo": "https://i.postimg.cc/rFdHF9XB/image.jpg"
},
    "–ê–Ω—è": {
        "text": "üë©‚Äçüè´ *–í–∏–∫–ª–∞–¥–∞—á –ê–Ω—è*\n\n"
                "–ú–∞—é 1.5 —Ä–æ–∫—É –¥–æ—Å–≤—ñ–¥—É –≤–∏–∫–ª–∞–¥–∞–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏. –õ–µ–≥–∫–æ –∑–Ω–∞—Ö–æ–¥–∂—É –∫–æ–Ω—Ç–∞–∫—Ç –∑ —Ä—ñ–∑–Ω–∏–º–∏ –≤—ñ–∫–æ–≤–∏–º–∏ –≥—Ä—É–ø–∞–º–∏.\n\n"
                "üéì –£—Ä–æ–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç—å –∑–∞—Ö–æ–ø–ª–∏–≤–æ —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ. –í–º—ñ—é –ø–æ—è—Å–Ω—é–≤–∞—Ç–∏ —Å–∫–ª–∞–¥–Ω—ñ —Ä–µ—á—ñ –¥–æ—Å—Ç—É–ø–Ω–æ.",
        "photo": "https://i.postimg.cc/8zQZkQbv/image.jpg"
    },
    "–•—Ä–∏—Å—Ç—è": {
        "text": "üë©‚Äçüè´ *–í–∏–∫–ª–∞–¥–∞—á –•—Ä–∏—Å—Ç—è*\n\n"
                "–ú–∞—é 2 —Ä–æ–∫–∏ –¥–æ—Å–≤—ñ–¥—É –≤–∏–∫–ª–∞–¥–∞–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏, —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—é—Å—å –Ω–∞ —Ä–æ–∑–º–æ–≤–Ω—ñ–π —Ç–∞ –±—ñ–∑–Ω–µ—Å –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ–π.\n\n"
                "üìö –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∫–æ–º—É–Ω—ñ–∫–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –æ—Å–æ–±–∏—Å—Ç—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –¥–ª—è –±—ñ–ª—å—à–æ–≥–æ –∑–∞–ª—É—á–µ–Ω–Ω—è.",
        "photo": "https://i.postimg.cc/NGZ3Xn4s/image.jpg"
    },
    "–û–ª—å–≥–∞": {
        "text": "üë©‚Äçüè´ *–í–∏–∫–ª–∞–¥–∞—á –û–ª—å–≥–∞*\n\n"
                 "–ú–∞—é 8 —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É –≤–∏–∫–ª–∞–¥–∞–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏. –ü—Ä–∞—Ü—é—é –∑ —Ä–æ–∑–º–æ–≤–Ω–æ—é —Ç–∞ –±—ñ–∑–Ω–µ—Å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é.\n\n"
                 "üí¨ –ú–æ—Ç–∏–≤—É—é —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –¥–æ —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è —ñ –∑–∞–≤–∂–¥–∏ –≤—Ä–∞—Ö–æ–≤—É—é —ó—Ö —ñ–Ω—Ç–µ—Ä–µ—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è—Ö.",
        "photo": "https://i.postimg.cc/g2mBqb6W/image.jpg"
    }
}

def update_last_interaction(message):
    chat_id = message.chat.id
    first_name = message.chat.first_name  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_name = message.chat.last_name  # –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    username = message.chat.username  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    
    current_utc_time = datetime.now()
    local_time = current_utc_time.astimezone(local_timezone)
    readable_time = local_time.strftime('%Y-%m-%d %H:%M:%S')
    current_time_unix = local_time.timestamp()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ username
    users_collection.update_one(
        {'user_id': chat_id},
        {'$set': {
            'first_name': first_name,
            'last_name': last_name,
            'username': username,
            'last_interaction': current_time_unix,
            'last_interaction_format': readable_time
        }},
        upsert=True
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    last_interaction_times[chat_id] = current_time_unix

#handlers
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_states[message.chat.id] = States.WELCOME
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤—ñ—Ç —ñ –ª–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Hello Space! üöÄ\n\n"
                                  "–ú–∏ —Ä–∞–¥—ñ, —â–æ –≤–∏ –≤–∏—Ä—ñ—à–∏–ª–∏ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Å–≤–æ—é –ø–æ–¥–æ—Ä–æ–∂ –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏ —Ä–∞–∑–æ–º –∑ –Ω–∞–º–∏! üá¨üáßüåü"
                                 )
    video = open('video_2024-09-24_10-16-39.mp4', 'rb')
    bot.send_video(message.chat.id, video)
    video.close()
    
    send_main_menu(message, admins, bot, update_last_interaction)
    update_last_interaction(message)
    
@bot.message_handler(content_types=['photo', 'video'])
def handle_media_message(message):
    if message.chat.id in admins:
        if user_states.get(message.chat.id) == States.CONFIRM_SENDING_TO_USER:
            if message.content_type == 'photo':
                admin_news[message.chat.id] = {'photo': message.photo[-1].file_id}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ
                bot.send_message(message.chat.id, "–§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ. –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø—ñ–¥–ø–∏—Å—É –¥–æ —Ñ–æ—Ç–æ.")
                
                # –ï—Å–ª–∏ –≤–∏–¥–µ–æ
            elif message.content_type == 'video':
                admin_news[message.chat.id] = {'video': message.video.file_id}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–∏–¥–µ–æ
                bot.send_message(message.chat.id, "–í—ñ–¥–µ–æ –æ—Ç—Ä–∏–º–∞–Ω–æ. –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø—ñ–¥–ø–∏—Å—É –¥–æ –≤—ñ–¥–µ–æ.")
                
            user_states[message.chat.id] = "AWAITING_CAPTION"
            
        elif user_states.get(message.chat.id) == States.CONFIRM_SENDING_TO_ALL:
            if message.content_type == 'photo':
                admin_news[message.chat.id] = {'photo': message.photo[-1].file_id}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ
                bot.send_message(message.chat.id, "–§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ. –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø—ñ–¥–ø–∏—Å—É –¥–æ —Ñ–æ—Ç–æ.")
                
                # –ï—Å–ª–∏ –≤–∏–¥–µ–æ
            elif message.content_type == 'video':
                admin_news[message.chat.id] = {'video': message.video.file_id}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–∏–¥–µ–æ
                bot.send_message(message.chat.id, "–í—ñ–¥–µ–æ –æ—Ç—Ä–∏–º–∞–Ω–æ. –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø—ñ–¥–ø–∏—Å—É –¥–æ –≤—ñ–¥–µ–æ.")
                
            user_states[message.chat.id] = "AWAITING_CAPTIONS"


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "AWAITING_CAPTION")
def collect_caption_for_media(message):
    if message.chat.id in admins:
        admin_news[message.chat.id]['text'] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ç—É –∂–µ –∑–∞–ø–∏—Å—å
        selected_user_id = selected_users.get(message.chat.id)
        bot.send_message(message.chat.id, 
                         f"–í–∏ –±–∞–∂–∞—î—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ ID: {selected_user_id}? (–¢–∞–∫/–ù—ñ)")
        user_states[message.chat.id] = "CONFIRM_SENDING"

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "AWAITING_CAPTIONS")
def collect_caption_for_media(message):
    if message.chat.id in admins:
        admin_news[message.chat.id]['text'] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ç—É –∂–µ –∑–∞–ø–∏—Å—å
        bot.send_message(message.chat.id, 
                         f"–í–∏ –±–∞–∂–∞—î—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º? (–¢–∞–∫/–ù—ñ)")
        user_states[message.chat.id] = "CONFIRM_SENDING_TO_ALL_USERS"

@bot.callback_query_handler(func=lambda call: True)
def handle_welcome_response(call):
    update_last_interaction(call.message)
    if call.data == "enter_news":
        enter_news(call.message, bot, users_collection, States)
    elif call.data == "send_to_all":  # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–Ω—É –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:")
        user_states[call.message.chat.id] = "CONFIRM_SENDING_TO_ALL"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    elif call.data.startswith("choose_user_"):
        selected_user_id = int(call.data.split("_")[-1])
        selected_user = users_collection.find_one({'user_id': selected_user_id})
        
        if selected_user:
            first_name = selected_user.get('first_name', '–ù–µ–≤—ñ–¥–æ–º–µ —ñ–º\'—è')
            last_name = selected_user.get('last_name', '')
            username = selected_user.get('username', '–ù–µ–º–∞—î username')
            
            selected_users[call.message.chat.id] = selected_user_id
            bot.send_message(call.message.chat.id, 
                             f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n"
                             f"–Ü–º'—è: {first_name}\n"
                             f"–ü—Ä—ñ–∑–≤–∏—â–µ: {last_name}\n"
                             f"Username: @{username}\n"
                             f"ID: {selected_user_id}\n\n"
                             "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–Ω—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è.")
            
            user_states[call.message.chat.id] = States.CONFIRM_SENDING_TO_USER
        else:
            bot.send_message(call.message.chat.id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == States.CONFIRM_SENDING_TO_USER)
def collect_personal_news(message):
    if message.chat.id in admins:
        selected_user_id = selected_users.get(message.chat.id)
        if selected_user_id:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
            if "http" in message.text and ("youtube" in message.text or "drive.google" in message.text):
                admin_news[message.chat.id] = {'video_link': message.text}
                bot.send_message(message.chat.id, 
                                 f"–í–∏ –±–∞–∂–∞—î—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ ID: {selected_user_id}? (–¢–∞–∫/–ù—ñ)")
                user_states[message.chat.id] = "CONFIRM_SENDING"
            else:
                admin_news[message.chat.id] = {'text': message.text}
                bot.send_message(message.chat.id, 
                                 f"–í–∏ –±–∞–∂–∞—î—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ ID: {selected_user_id}? (–¢–∞–∫/–ù—ñ)")
                user_states[message.chat.id] = "CONFIRM_SENDING"
        else:
            bot.send_message(message.chat.id, "–ù–µ –≤–∏–±—Ä–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–∏–Ω–∏.")

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "CONFIRM_SENDING_TO_ALL")
def collect_news_for_all(message):
    if message.chat.id in admins:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ
        if "http" in message.text and ("youtube" in message.text or "drive.google" in message.text):
            admin_news[message.chat.id] = {'video_link': message.text}
        else:
            admin_news[message.chat.id] = {'text': message.text}
        
        bot.send_message(message.chat.id, "–í–∏ –±–∞–∂–∞—î—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º? (–¢–∞–∫/–ù—ñ)")
        user_states[message.chat.id] = "CONFIRM_SENDING_TO_ALL_USERS"

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "CONFIRM_SENDING")
def confirm_sending_news(message):
    if message.text.lower() == "—Ç–∞–∫":
        selected_user_id = selected_users.get(message.chat.id)
        send_news_to_user(message.chat.id, selected_user_id, admin_news, bot)
    else:
        bot.send_message(message.chat.id, "–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–∏–Ω–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")
    user_states[message.chat.id] = None

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "CONFIRM_SENDING_TO_ALL_USERS")
def confirm_sending_news_to_all(message):
    if message.text.lower() == "—Ç–∞–∫":
        send_news_to_all(message.chat.id, admin_news, bot, users_collection)
    else:
        bot.send_message(message.chat.id, "–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–∏–Ω–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")
    user_states[message.chat.id] = None


# @bot.message_handler(func=lambda message: message.text == "üìä –î—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å")
# def start_message(message):
#     bot.send_message(message.chat.id, "Welcome to the English Level Test! Please answer the questions by typing your answers.")
#     start_quiz(message, questions, user_answers, bot)

@bot.message_handler(func=lambda message: message.text == "üè´ –ü—Ä–æ –®–∫–æ–ª—É")
def start_message(message):
    about_school_menu(message, bot, update_last_interaction)

# @bot.message_handler(func=lambda message: message.chat.id in user_answers and user_answers[message.chat.id]['current_question'] < len(questions))
# def handle_answer(message):
#     user_id = message.chat.id
#     question_data = questions[user_answers[user_id]['current_question']]

#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä)
#     if message.text.strip().lower() == question_data['correct'].lower():
#         user_answers[user_id]['correct_count'] += 1

#     # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
#     user_answers[user_id]['current_question'] += 1
#     if user_answers[user_id]['current_question'] < len(questions):
#         send_question(message, questions, user_answers, bot)
#     else:
#         calculate_result(message, user_answers, questions, bot)
        
@bot.message_handler(func=lambda message: message.text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
def handle_main_menu_request(message):
    chat_id = message.chat.id
    #user_last_interaction[chat_id] = datetime.now()
    send_main_menu(message, admins, bot, update_last_interaction)
    
@bot.message_handler(func=lambda message: message.text == "‚ùì –ß–æ–º—É –º–∏?")
def handle_main_menu_request(message):
    chat_id = message.chat.id
    #user_last_interaction[chat_id] = datetime.now()
    why_we(message, bot, update_last_interaction)
    
@bot.message_handler(func=lambda message: message.text == "üí¨ –ü–æ–ø—É–ª—è—Ä–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")
def handle_main_menu_request(message):
    chat_id = message.chat.id
    #user_last_interaction[chat_id] = datetime.now()
    popular_question(message, bot, update_last_interaction)
    
@bot.message_handler(func=lambda message: message.text == "üìö –ü—Ä–æ –Ω–∞–≤—á–∞–Ω–Ω—è")
def handle_main_menu_request(message):
    chat_id = message.chat.id
    #user_last_interaction[chat_id] = datetime.now()
    learn_menu(message, bot, update_last_interaction)

@bot.message_handler(func=lambda message: message.text == "üìö –ù–∞—à—ñ –∫—É—Ä—Å–∏")
def handle_main_menu_request(message):
    chat_id = message.chat.id
    #user_last_interaction[chat_id] = datetime.now()
    course_structure(message, bot, update_last_interaction)

@bot.message_handler(func=lambda message: message.text == "üéì –§–æ—Ä–º–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è")
def handle_main_menu_request(message):
    chat_id = message.chat.id
    #user_last_interaction[chat_id] = datetime.now()
    format_learn(message, bot, update_last_interaction)
    
@bot.message_handler(func=lambda message: message.text == "üë©‚Äçüè´ –ù–∞—à—ñ –≤–∏–∫–ª–∞–¥–∞—á—ñ")
def show_teachers_menu(message):
    teachers_menu(message, bot, update_last_interaction, teachers_data)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda message: message.text in teachers_data)
def process_teacher_choice(message):
    handle_teacher_choice(message, bot, teachers_data)
    
  
@bot.message_handler(func=lambda message: message.text == "üìç –ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏")
def handle_main_menu_request(message):
    chat_id = message.chat.id
    #user_last_interaction[chat_id] = datetime.now()
    contacts(message, bot, update_last_interaction)
    send_main_menu(message, admins, bot, update_last_interaction)
    
@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    contact = message.contact
    chat_id = message.chat.id

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    contact_message = (
        f"–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:\n"
        f"–ò–º—è: {contact.first_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {contact.phone_number}\n"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {contact.user_id}\n"
        f"ID —á–∞—Ç–∞: {chat_id}"
    )

    bot.send_message(message.chat.id, "–î—è–∫—É—é! –ù–∞—à—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –Ω–µ–∑–∞–±–∞—Ä–æ–º –∑–≤'—è–∂—É—Ç—å—Å—è –∑ –í–∞–º–∏.")

    bot.send_message(CONTACT_RECEIVER_CHAT_ID, contact_message)
    
@bot.message_handler(func=lambda message: message.text == "üìä –î—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å")
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item1 = types.KeyboardButton('–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞')
    item2 = types.KeyboardButton('–õ–µ–∫—Å–∏–∫–∞')
    item3 = types.KeyboardButton('üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
    markup.add(item1, item2)
    markup.add(item3)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–≤–æ–≥–æ —Ä—ñ–≤–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏. –í–∏–±–µ—Ä–∏ —Ç–µ—Å—Ç: –ì—Ä–∞–º–∞—Ç–∏–∫–∞ —á–∏ –õ–µ–∫—Å–∏–∫–∞.", reply_markup=markup)
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤
@bot.message_handler(func=lambda message: message.text in ['–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞', '–õ–µ–∫—Å–∏–∫–∞'])
def start_test(message):
    chat_id = message.chat.id
    if message.text == '–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞':
        user_data[chat_id] = {"questions": grammar_questions, "score": 0, "current_question": 0}
    elif message.text == '–õ–µ–∫—Å–∏–∫–∞':
        user_data[chat_id] = {"questions": vocabulary_questions, "score": 0, "current_question": 0}
    send_next_question(chat_id, user_data, bot, calculate_level)    
    
@bot.message_handler(func=lambda message: message.chat.id in user_data)
def check_answer(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id)
    
    if user is None:
        return
    
    current_question = user["current_question"]
    questions = user["questions"]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
    if message.text == questions[current_question]["answer"]:
        user["score"] += 1
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç
    if message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç":
        calculate_level(chat_id, user_data, bot)
        
        # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        reset_user_data(chat_id)
        
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    user["current_question"] += 1
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    send_next_question(chat_id, user_data, bot, calculate_level)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global selected_course  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    
    if message.text == "üåê –ó–∞–≥–∞–ª—å–Ω–∏–π –∫—É—Ä—Å":
        selected_course = "general"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞
        course_deteil(message, bot, update_last_interaction, course_type="general")
    elif message.text == "üë§ –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å":
        selected_course = "indiv"
        course_deteil(message, bot, update_last_interaction, course_type="indiv")
    elif message.text == "üë®‚Äçüè´ –ì—Ä—É–ø–æ–≤—ñ –∑–∞–Ω—è—Ç—Ç—è –¥—ñ—Ç–∏":
        selected_course = "group_child"
        course_deteil(message, bot, update_last_interaction, course_type="group_child")
    elif message.text == "üó£Ô∏è –†–æ–∑–º–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ–Ω—Å–∏–≤":
        selected_course = "group_speak"
        course_deteil(message, bot, update_last_interaction, course_type="group_speak")
    elif message.text == "üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è":
        selected_course = "group_corp"
        course_deteil(message, bot, update_last_interaction, course_type="group_corp")
    
    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–¶—ñ–Ω–∞"
    elif message.text == "üí∞ –¶—ñ–Ω–∞" and selected_course:
        # –í—ã–≤–æ–¥–∏–º —Ü–µ–Ω—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
        show_price(message, bot, update_last_interaction, course_type=selected_course)
    
    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ –∫—É—Ä—Å"
    elif message.text == "üìñ –ü—Ä–æ –∫—É—Ä—Å" and selected_course:
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
        show_about_course(message, bot, update_last_interaction, course_type=selected_course)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def reset_user_data(chat_id):
    if chat_id in user_data:
        user_data[chat_id]["current_question"] = 0  # –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        user_data[chat_id]["score"] = 0  # –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç
        # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        # del user_data[chat_id]
    

# scheduler = BackgroundScheduler()
# scheduler.add_job(send_reminder, 'interval', seconds=10)
# scheduler.start()

bot.polling(none_stop=True)
